---
import BaseLayout from "@/layouts/BaseLayout.astro";
import siteInfo from "@/site-info.json";
// Page metadata from a static site configuration data file
const pageMeta = siteInfo.pages.filter( (pg) => pg.path === new URL(Astro.request.url).pathname )[0] ?? {};
pageMeta.path = new URL(Astro.request.url).pathname;
// Allows us to locally override the config data file
pageMeta.subtitle = "All knowledge and general articles by tag name and by date (newest first)";

import ArticlesList from "@/components/ArticlesList.astro";
import { getAllArticles } from "@/utilModules/getCollections.mjs";

import type { GetStaticPaths } from "astro";

// Exporting this makes it available to the getStaticPaths function below
export const articleListSize = siteInfo.articleListSize ? siteInfo.articleListSize : 5;

// Pass the merged list of articles for the selected collections to the paginate method
// export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
// export async function getStaticPaths({ paginate }) {
export async function getStaticPaths({ }) {
    // Gets the merged and sorted list of articles
    const posts = await getAllArticles(['posts', 'kb']);
    
    const uniqueTags = [...new Set(posts.map((post) => post.data?.tags ?? []).flat())];
    console.log('[src/pages/tags/[tag].astro] uniqueTags: ', uniqueTags)

        return uniqueTags.map((tag) => {
            const filteredPosts = posts.filter((post) => post.data.tags.includes(tag));
            return {
                    params: { tag },
                    props: { posts: filteredPosts },
            };
        });
    // Returns the list wrapped in paginated chunks - becomes available to this page as Astro.props.page
    // return paginate(posts, { pageSize: articleListSize });
    // return uniqueTags.map((tag) => {
    //     const filteredPosts = posts.filter((post) => post.data.tags.includes(tag));
    //     return paginate( filteredPosts, {
    //         params: { tag: tag.toLowerCase() },
    //         props: { title: tag },
    //         pageSize: articleListSize,
    //     });
    //     // {
    //     //         params: { tag },
    //     //         // props: { posts: filteredPosts },
    //     //         props: paginate(posts, { pageSize: articleListSize }),
    //     // };
    // });
};

// export async function getStaticPaths() {
//     const allPosts = await getAllArticles(['posts', 'kb']);
//     // const allPosts = await Astro.glob('@/content/*.md');
//     const uniqueTags = [...new Set(allPosts.map((post) => post.data?.tags ?? []).flat())];
//     console.log('[src/pages/tags/[tag].astro] uniqueTags: ', uniqueTags)
//     console.log('[src/pages/tags/[tag].astro] allPosts[0]: ', allPosts[0])
//     return uniqueTags.map((tag) => {
//         const filteredPosts = allPosts.filter((post) => post.data.tags.includes(tag));
//         return {
//                 params: { tag },
//                 props: { posts: filteredPosts },
//         };
//     });
// }

const { tag } = Astro.params;
// const { posts } = Astro.props;

pageMeta.title = `Articles Tagged with "${tag}"`;
pageMeta.filter = {tags: tag}

// Reference the paginated list from above
const posts = Astro.props.posts;

// console.log('[src/pages/tags/[tag].astro] Astro.props', Astro.props)
// console.log('[src/pages/tags/[tag].astro] Astro.props.posts', posts)

---
<BaseLayout frontmatter={pageMeta}>
    <!-- <p>Posts tagged with "<b>{tag}</b>"</p>
    <ul>
        {
            posts.map((post) => (
                <li>
                    <a href={post.data.path}>{post.data.title}</a>
                </li>
            ))
        }
    </ul> -->
    <ArticlesList articles={posts} label={pageMeta.subtitle} LabelTag="h2" />
</BaseLayout>
